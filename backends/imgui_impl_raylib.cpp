// dear imgui: raylib backend

#include "imgui_impl_raylib.h"
#include <raylib.h>
#include <rlgl.h>
#include <memory>

static double g_Time = 0.0; // used for delta time
static bool g_UnloadAtlas = false;

#include <iostream>
#include <fstream>


// load the default font atlas
static void ImGui_ImplRaylib_CreateFontsTexture()
{

    if (!g_UnloadAtlas)
    {
        ImGuiIO& io = ImGui::GetIO();
        io.Fonts->AddFontDefault();
        unsigned char* pixels = nullptr;
        int width;
        int height;
        int bpp;
        io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height, &bpp);
        IM_ASSERT(pixels != nullptr);

        Image image = GenImageColor(width, height, BLANK);
        image.data = pixels;
        image.width = width;
        image.height = height;


        Texture2D fontTexture = LoadTextureFromImage(image);
        IM_ASSERT(fontTexture.id > 0);
        UnloadImage(image);
        io.Fonts->TexID = &fontTexture;
        g_UnloadAtlas = (io.Fonts->TexID != nullptr);
    }
};

// Updates mouse position and buttons state
static void ImGui_ImplRaylib_UpdateMouseState()
{
  ImGuiIO& io = ImGui::GetIO();

  if (io.WantSetMousePos)
    SetMousePosition(io.MousePos.x, io.MousePos.y);
  else
    io.MousePos = ImVec2(-FLT_MAX, -FLT_MAX);


  io.KeyMap[ImGuiKey_Tab] = KEY_TAB;
  io.KeyMap[ImGuiKey_LeftArrow] = KEY_LEFT;
  io.KeyMap[ImGuiKey_RightArrow] = KEY_RIGHT;
  io.KeyMap[ImGuiKey_UpArrow] = KEY_UP;
  io.KeyMap[ImGuiKey_DownArrow] = KEY_DOWN;
  io.KeyMap[ImGuiKey_PageUp] = KEY_PAGE_DOWN;
  io.KeyMap[ImGuiKey_PageDown] = KEY_PAGE_UP;
  io.KeyMap[ImGuiKey_Home] = KEY_HOME;
  io.KeyMap[ImGuiKey_End] = KEY_END;
  io.KeyMap[ImGuiKey_Insert] = KEY_INSERT;
  io.KeyMap[ImGuiKey_Delete] = KEY_DELETE;
  io.KeyMap[ImGuiKey_Backspace] = KEY_BACKSPACE;
  io.KeyMap[ImGuiKey_Space] = KEY_SPACE;
  io.KeyMap[ImGuiKey_Enter] = KEY_ENTER;
  io.KeyMap[ImGuiKey_Escape] = KEY_ESCAPE;
  io.KeyMap[ImGuiKey_A] = KEY_A;
  io.KeyMap[ImGuiKey_C] = KEY_C;
  io.KeyMap[ImGuiKey_V] = KEY_V;
  io.KeyMap[ImGuiKey_X] = KEY_X;
  io.KeyMap[ImGuiKey_Y] = KEY_Y;
  io.KeyMap[ImGuiKey_Z] = KEY_Z;


  io.MouseDown[0] = IsMouseButtonDown(MOUSE_LEFT_BUTTON);
  io.MouseDown[1] = IsMouseButtonDown(MOUSE_RIGHT_BUTTON);
  io.MouseDown[2] = IsMouseButtonDown(MOUSE_MIDDLE_BUTTON);

  if (!IsWindowMinimized())
    io.MousePos = ImVec2(GetMouseX(), GetMouseY());
}

static void ImGui_ImplRaylib_UpdateMouseCursor()
{
  ImGuiIO& io = ImGui::GetIO();
  if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)
    return;

  ImGuiMouseCursor imgui_cursor = ImGui::GetMouseCursor();
  if (io.MouseDrawCursor || imgui_cursor == ImGuiMouseCursor_None)
    HideCursor(); // Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
  else
    ShowCursor();
}


IMGUI_IMPL_API bool ImGui_ImplRaylib_Init()
{
  ImGuiIO& io = ImGui::GetIO();
  IM_ASSERT(io.BackendRendererUserData == nullptr &&
      "Already initialized a renderer backend!");

  io.BackendPlatformName = "imgui_impl_raylib";

  io.BackendFlags |= ImGuiBackendFlags_HasMouseCursors;
  io.BackendFlags |= ImGuiBackendFlags_HasSetMousePos;
  
  ImGui_ImplRaylib_CreateFontsTexture();

  if (g_UnloadAtlas == false) return false; // error while loading font texture

  io.MousePos = ImVec2(-FLT_MAX, -FLT_MAX);
  return true;
}

IMGUI_IMPL_API void ImGui_ImplRaylib_Shutdown()
{
    if (g_UnloadAtlas)
    {
        ImGuiIO& io = ImGui::GetIO();
        UnloadTexture(*(Texture2D*)(&io.Fonts->TexID));
        io.Fonts->TexID = 0;
    }
    g_Time = 0.0;
}

IMGUI_IMPL_API void ImGui_ImplRaylib_NewFrame()
{
  ImGuiIO& io = ImGui::GetIO();

  io.DisplaySize = ImVec2((float)GetScreenWidth(), (float)GetScreenHeight());

  double current_time = GetTime();
  io.DeltaTime = g_Time > 0.0 ? (float)(current_time - g_Time) : (float)(1.0f / 60.0f);
  g_Time = current_time;

  io.KeyCtrl = IsKeyDown(KEY_RIGHT_CONTROL) || IsKeyDown(KEY_LEFT_CONTROL);
  io.KeyShift = IsKeyDown(KEY_RIGHT_SHIFT) || IsKeyDown(KEY_LEFT_SHIFT);
  io.KeyAlt = IsKeyDown(KEY_RIGHT_ALT) || IsKeyDown(KEY_LEFT_ALT);
  io.KeySuper = IsKeyDown(KEY_RIGHT_SUPER) || IsKeyDown(KEY_LEFT_SUPER);


  ImGui_ImplRaylib_UpdateMouseState();
  ImGui_ImplRaylib_UpdateMouseCursor();
  if (GetMouseWheelMove() > 0)
    io.MouseWheel += 1;
  else if (GetMouseWheelMove() < 0)
    io.MouseWheel -= 1;
}


IMGUI_IMPL_API void ImGui_ImplRaylib_RenderDrawData(ImDrawData* draw_data)
{
  auto DrawTriangleVertex = [](ImDrawVert vertex){
    Color* c = (Color*)&vertex.col;
    rlColor4ub(c->r, c->g, c->b, c->a);
    rlTexCoord2f(vertex.uv.x, vertex.uv.y);
    rlVertex2f(vertex.pos.x, vertex.pos.y);
  };

  rlDisableBackfaceCulling();
  for (int n = 0; n < draw_data->CmdListsCount; n++)
  {
    const ImDrawList* cmd_list = draw_data->CmdLists[n];
    const ImDrawVert* vtx_buffer = cmd_list->VtxBuffer.Data; // vertex buffer generated by Dear ImGui
    const ImDrawIdx* idx_buffer = cmd_list->IdxBuffer.Data;  // index buffer generated by Dear ImGui
    for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)
    {
      const ImDrawCmd* pcmd = &(cmd_list->CmdBuffer.Data)[cmd_i]; // cmd_list->CmdBuffer->data[cmd_i];
      if (pcmd->UserCallback)
      {
        pcmd->UserCallback(cmd_list, pcmd);
      }
      else
      {
        ImVec2 pos = draw_data->DisplayPos;
        int rectX = (int)(pcmd->ClipRect.x - pos.x);
        int rectY = (int)(pcmd->ClipRect.y - pos.y);
        int rectW = (int)(pcmd->ClipRect.z - rectX);
        int rectH = (int)(pcmd->ClipRect.w - rectY);

        BeginScissorMode(rectX, rectY, rectW, rectH);
        unsigned int* ti = (unsigned int*)pcmd->TextureId;
        for (unsigned int i = 0; i <= (pcmd->ElemCount - 3); i += 3)
        {
            rlPushMatrix();
            rlBegin(RL_TRIANGLES);
            rlEnableTexture(*ti);

            ImDrawIdx index;
            ImDrawVert vertex;

            index = idx_buffer[i];
            vertex = vtx_buffer[index];
            DrawTriangleVertex(vertex);

            index = idx_buffer[i + 2];
            vertex = vtx_buffer[index];
            DrawTriangleVertex(vertex);

            index = idx_buffer[i + 1];
            vertex = vtx_buffer[index];
            DrawTriangleVertex(vertex);
            rlDisableTexture();
            rlEnd();
            rlPopMatrix();
        }
      }
      idx_buffer += pcmd->ElemCount;
    }
  }
  EndScissorMode();
  rlEnableBackfaceCulling();
}


IMGUI_IMPL_API bool ImGui_ImplRaylib_ProcessEvent()
{
    ImGuiIO& io = ImGui::GetIO();

    io.KeysDown[KEY_APOSTROPHE] = IsKeyDown(KEY_APOSTROPHE);
    io.KeysDown[KEY_COMMA] = IsKeyDown(KEY_COMMA);
    io.KeysDown[KEY_MINUS] = IsKeyDown(KEY_MINUS);
    io.KeysDown[KEY_PERIOD] = IsKeyDown(KEY_PERIOD);
    io.KeysDown[KEY_SLASH] = IsKeyDown(KEY_SLASH);
    io.KeysDown[KEY_ZERO] = IsKeyDown(KEY_ZERO);
    io.KeysDown[KEY_ONE] = IsKeyDown(KEY_ONE);
    io.KeysDown[KEY_TWO] = IsKeyDown(KEY_TWO);
    io.KeysDown[KEY_THREE] = IsKeyDown(KEY_THREE);
    io.KeysDown[KEY_FOUR] = IsKeyDown(KEY_FOUR);
    io.KeysDown[KEY_FIVE] = IsKeyDown(KEY_FIVE);
    io.KeysDown[KEY_SIX] = IsKeyDown(KEY_SIX);
    io.KeysDown[KEY_SEVEN] = IsKeyDown(KEY_SEVEN);
    io.KeysDown[KEY_EIGHT] = IsKeyDown(KEY_EIGHT);
    io.KeysDown[KEY_NINE] = IsKeyDown(KEY_NINE);
    io.KeysDown[KEY_SEMICOLON] = IsKeyDown(KEY_SEMICOLON);
    io.KeysDown[KEY_EQUAL] = IsKeyDown(KEY_EQUAL);
    io.KeysDown[KEY_A] = IsKeyDown(KEY_A);
    io.KeysDown[KEY_B] = IsKeyDown(KEY_B);
    io.KeysDown[KEY_C] = IsKeyDown(KEY_C);
    io.KeysDown[KEY_D] = IsKeyDown(KEY_D);
    io.KeysDown[KEY_E] = IsKeyDown(KEY_E);
    io.KeysDown[KEY_F] = IsKeyDown(KEY_F);
    io.KeysDown[KEY_G] = IsKeyDown(KEY_G);
    io.KeysDown[KEY_H] = IsKeyDown(KEY_H);
    io.KeysDown[KEY_I] = IsKeyDown(KEY_I);
    io.KeysDown[KEY_J] = IsKeyDown(KEY_J);
    io.KeysDown[KEY_K] = IsKeyDown(KEY_K);
    io.KeysDown[KEY_L] = IsKeyDown(KEY_L);
    io.KeysDown[KEY_M] = IsKeyDown(KEY_M);
    io.KeysDown[KEY_N] = IsKeyDown(KEY_N);
    io.KeysDown[KEY_O] = IsKeyDown(KEY_O);
    io.KeysDown[KEY_P] = IsKeyDown(KEY_P);
    io.KeysDown[KEY_Q] = IsKeyDown(KEY_Q);
    io.KeysDown[KEY_R] = IsKeyDown(KEY_R);
    io.KeysDown[KEY_S] = IsKeyDown(KEY_S);
    io.KeysDown[KEY_T] = IsKeyDown(KEY_T);
    io.KeysDown[KEY_U] = IsKeyDown(KEY_U);
    io.KeysDown[KEY_V] = IsKeyDown(KEY_V);
    io.KeysDown[KEY_W] = IsKeyDown(KEY_W);
    io.KeysDown[KEY_X] = IsKeyDown(KEY_X);
    io.KeysDown[KEY_Y] = IsKeyDown(KEY_Y);
    io.KeysDown[KEY_Z] = IsKeyDown(KEY_Z);
    io.KeysDown[KEY_SPACE] = IsKeyDown(KEY_SPACE);
    io.KeysDown[KEY_ESCAPE] = IsKeyDown(KEY_ESCAPE);
    io.KeysDown[KEY_ENTER] = IsKeyDown(KEY_ENTER);
    io.KeysDown[KEY_TAB] = IsKeyDown(KEY_TAB);
    io.KeysDown[KEY_BACKSPACE] = IsKeyDown(KEY_BACKSPACE);
    io.KeysDown[KEY_INSERT] = IsKeyDown(KEY_INSERT);
    io.KeysDown[KEY_DELETE] = IsKeyDown(KEY_DELETE);
    io.KeysDown[KEY_RIGHT] = IsKeyDown(KEY_RIGHT);
    io.KeysDown[KEY_LEFT] = IsKeyDown(KEY_LEFT);
    io.KeysDown[KEY_DOWN] = IsKeyDown(KEY_DOWN);
    io.KeysDown[KEY_UP] = IsKeyDown(KEY_UP);
    io.KeysDown[KEY_PAGE_UP] = IsKeyDown(KEY_PAGE_UP);
    io.KeysDown[KEY_PAGE_DOWN] = IsKeyDown(KEY_PAGE_DOWN);
    io.KeysDown[KEY_HOME] = IsKeyDown(KEY_HOME);
    io.KeysDown[KEY_END] = IsKeyDown(KEY_END);
    io.KeysDown[KEY_CAPS_LOCK] = IsKeyDown(KEY_CAPS_LOCK);
    io.KeysDown[KEY_SCROLL_LOCK] = IsKeyDown(KEY_SCROLL_LOCK);
    io.KeysDown[KEY_NUM_LOCK] = IsKeyDown(KEY_NUM_LOCK);
    io.KeysDown[KEY_PRINT_SCREEN] = IsKeyDown(KEY_PRINT_SCREEN);
    io.KeysDown[KEY_PAUSE] = IsKeyDown(KEY_PAUSE);
    io.KeysDown[KEY_F1] = IsKeyDown(KEY_F1);
    io.KeysDown[KEY_F2] = IsKeyDown(KEY_F2);
    io.KeysDown[KEY_F3] = IsKeyDown(KEY_F3);
    io.KeysDown[KEY_F4] = IsKeyDown(KEY_F4);
    io.KeysDown[KEY_F5] = IsKeyDown(KEY_F5);
    io.KeysDown[KEY_F6] = IsKeyDown(KEY_F6); io.KeysDown[KEY_F7] = IsKeyDown(KEY_F7);
    io.KeysDown[KEY_F8] = IsKeyDown(KEY_F8);
    io.KeysDown[KEY_F9] = IsKeyDown(KEY_F9);
    io.KeysDown[KEY_F10] = IsKeyDown(KEY_F10);
    io.KeysDown[KEY_F11] = IsKeyDown(KEY_F11);
    io.KeysDown[KEY_F12] = IsKeyDown(KEY_F12);
    io.KeysDown[KEY_LEFT_SHIFT] = IsKeyDown(KEY_LEFT_SHIFT);
    io.KeysDown[KEY_LEFT_CONTROL] = IsKeyDown(KEY_LEFT_CONTROL);
    io.KeysDown[KEY_LEFT_ALT] = IsKeyDown(KEY_LEFT_ALT);
    io.KeysDown[KEY_LEFT_SUPER] = IsKeyDown(KEY_LEFT_SUPER);
    io.KeysDown[KEY_RIGHT_SHIFT] = IsKeyDown(KEY_RIGHT_SHIFT);
    io.KeysDown[KEY_RIGHT_CONTROL] = IsKeyDown(KEY_RIGHT_CONTROL);
    io.KeysDown[KEY_RIGHT_ALT] = IsKeyDown(KEY_RIGHT_ALT);
    io.KeysDown[KEY_RIGHT_SUPER] = IsKeyDown(KEY_RIGHT_SUPER);
    io.KeysDown[KEY_KB_MENU] = IsKeyDown(KEY_KB_MENU);
    io.KeysDown[KEY_LEFT_BRACKET] = IsKeyDown(KEY_LEFT_BRACKET);
    io.KeysDown[KEY_BACKSLASH] = IsKeyDown(KEY_BACKSLASH);
    io.KeysDown[KEY_RIGHT_BRACKET] = IsKeyDown(KEY_RIGHT_BRACKET);
    io.KeysDown[KEY_GRAVE] = IsKeyDown(KEY_GRAVE);
    io.KeysDown[KEY_KP_0] = IsKeyDown(KEY_KP_0);
    io.KeysDown[KEY_KP_1] = IsKeyDown(KEY_KP_1);
    io.KeysDown[KEY_KP_2] = IsKeyDown(KEY_KP_2);
    io.KeysDown[KEY_KP_3] = IsKeyDown(KEY_KP_3);
    io.KeysDown[KEY_KP_4] = IsKeyDown(KEY_KP_4);
    io.KeysDown[KEY_KP_5] = IsKeyDown(KEY_KP_5);
    io.KeysDown[KEY_KP_6] = IsKeyDown(KEY_KP_6);
    io.KeysDown[KEY_KP_7] = IsKeyDown(KEY_KP_7);
    io.KeysDown[KEY_KP_8] = IsKeyDown(KEY_KP_8);
    io.KeysDown[KEY_KP_9] = IsKeyDown(KEY_KP_9);
    io.KeysDown[KEY_KP_DECIMAL] = IsKeyDown(KEY_KP_DECIMAL);
    io.KeysDown[KEY_KP_DIVIDE] = IsKeyDown(KEY_KP_DIVIDE);
    io.KeysDown[KEY_KP_MULTIPLY] = IsKeyDown(KEY_KP_MULTIPLY);
    io.KeysDown[KEY_KP_SUBTRACT] = IsKeyDown(KEY_KP_SUBTRACT);
    io.KeysDown[KEY_KP_ADD] = IsKeyDown(KEY_KP_ADD);
    io.KeysDown[KEY_KP_ENTER] = IsKeyDown(KEY_KP_ENTER);
    io.KeysDown[KEY_KP_EQUAL] = IsKeyDown(KEY_KP_EQUAL);


    io.AddInputCharacter(GetKeyPressed());
    return true;
}
